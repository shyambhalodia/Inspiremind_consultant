{"version":3,"file":"static/js/832.7faea2d6.chunk.js","mappings":"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","sources":["components/dashboard/service-plans/plans/ServicePlanAdd.jsx","components/dashboard/service-plans/plans/ServiceplanDetail.jsx","components/dashboard/service-plans/terms-and-policy/TermsPolicyForm.jsx","components/dashboard/service-plans/terms-and-policy/TermsPolicySetup.jsx","components/ui-components/data-grid/ExportMenu.jsx","components/dashboard/service-plans/plans/ServicePlanList.jsx","components/dashboard/service-plans/index.jsx","pages/dashboard/ServiceAndPlans.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\r\n\r\nimport KeyboardArrowDownSharpIcon from \"@mui/icons-material/KeyboardArrowDownSharp\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormHelperText from \"@mui/material/FormHelperText\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport Select from \"@mui/material/Select\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\nimport { Formik } from \"formik\";\r\nimport { get, isEmpty, map } from \"lodash\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport { getCurrencyList } from \"../../../../store/slice/common\";\r\nimport {\r\n  getServicePlan,\r\n  postServicePlanAdd,\r\n} from \"../../../../store/slice/dashboard/servicePlanSlice\";\r\nimport translate from \"../../../hooks/translate\";\r\nimport CMDialog from \"../../../ui-components/dialog/CMDialog\";\r\nimport RichTextEditor from \"../../../ui-components/editor/RichTextEditor\";\r\nimport CMRadio from \"../../../ui-components/form-components/CMRadio\";\r\nimport { Box } from \"@mui/material\";\r\nimport { Drawer } from \"@mui/material\";\r\nimport \"./RightModal.css\";\r\nimport ArrowBackIosIcon from \"@mui/icons-material/ArrowBackIos\";\r\n\r\nconst consultantSessionsList = [\r\n  { label: translate(\"common_weekly\") },\r\n  { label: translate(\"common_biweekly\") },\r\n  { label: translate(\"common_monthly\") },\r\n];\r\n\r\nconst ServicePlanAdd = (props) => {\r\n  const { open, onClose, dialogData } = props;\r\n  const dispatch = useDispatch();\r\n  const currencyList = useSelector((state) => state.common.currencyList);\r\n  const serviceTypes = useSelector((state) => state.servicePlan.serviceTypes);\r\n\r\n  const serviceTypeOnline = get(serviceTypes, \"serviceTypeOnline\", false);\r\n  const serviceTypeOffline = get(serviceTypes, \"serviceTypeOffline\", false);\r\n  const serviceTypePhone = get(serviceTypes, \"serviceTypePhone\", false);\r\n\r\n  const allServiceType =\r\n    serviceTypeOnline || serviceTypeOffline || serviceTypePhone;\r\n  useEffect(() => {\r\n    dispatch(getCurrencyList());\r\n  }, [dispatch]);\r\n\r\n  const schemaObj = Yup.object().shape({\r\n    planName: Yup.string()\r\n      .min(5, translate(\"consultant_error_service_plan_name_too_short\"))\r\n      .max(50, translate(\"consultant_error_service_plan_name_too_long\"))\r\n      .required(translate(\"consultant_error_service_plan_name_required\")),\r\n    numberOfConsultant: Yup.number().required(\r\n      translate(\"consultant_error_number_of_consultation_required\")\r\n    ),\r\n    sessionName: Yup.string().when(\"numberOfConsultant\", {\r\n      is: (value) => value !== 1,\r\n      then: Yup.string().required(\r\n        translate(\"common_error_consultant_session_required\")\r\n      ),\r\n      otherwise: Yup.string(),\r\n    }),\r\n    timeUnit: Yup.number().required(\r\n      translate(\"common_error_time_duration_required\")\r\n    ),\r\n    dietPlan: Yup.boolean().required(\r\n      translate(\"common_error_diet_plan_required\")\r\n    ),\r\n    currencyId: Yup.object().required(\r\n      translate(\"consultant_error_currency_type_required\")\r\n    ),\r\n    amount: Yup.number().required(\r\n      translate(\"consultant_error_amount_required\")\r\n    ),\r\n    details: Yup.string().required(\r\n      translate(\"consultant_error_description_required\")\r\n    ),\r\n  });\r\n\r\n  // const schemaObj = Yup.object().shape({\r\n  //   planName: Yup.string()\r\n  //     .min(5, translate(\"consultant_error_service_plan_name_too_short\"))\r\n  //     .max(50, translate(\"consultant_error_service_plan_name_too_long\"))\r\n  //     .required(translate(\"consultant_error_service_plan_name_required\")),\r\n  //   numberOfConsultant: Yup.number().required(\r\n  //     translate(\"consultant_error_number_of_consultation_required\")\r\n  //   ),\r\n  //   sessionName: Yup.string().required(\r\n  //     translate(\"common_error_consultant_session_required\")\r\n  //   ),\r\n  //   timeUnit: Yup.number().required(\r\n  //     translate(\"common_error_time_duration_required\")\r\n  //   ),\r\n  //   dietPlan: Yup.boolean().required(\r\n  //     translate(\"common_error_diet_plan_required\")\r\n  //   ),\r\n  //   currencyId: Yup.object().required(\r\n  //     translate(\"consultant_error_currency_type_required\")\r\n  //   ),\r\n  //   amount: Yup.number().required(\r\n  //     translate(\"consultant_error_amount_required\")\r\n  //   ),\r\n  //   details: Yup.string().required(\r\n  //     translate(\"consultant_error_description_required\")\r\n  //   ),\r\n  // });\r\n\r\n  // const handleChangeTab = (props,e) => {\r\n  //   console.log(e.target.value, \"93\");\r\n  //   props.handleChange\r\n  // };\r\n\r\n  const handleAddServicePlan = async (payload) => {\r\n    payload.currencyId = get(payload, \"currencyId._id\", \"\");\r\n\r\n    if (get(dialogData, \"formType\") === \"update\") {\r\n      payload._id = get(dialogData, \"rowData._id\");\r\n    }\r\n    const res = await dispatch(postServicePlanAdd(payload))\r\n      .unwrap()\r\n      .then((result) => {\r\n        if (result.status) {\r\n          dispatch(getServicePlan());\r\n          onClose();\r\n          toast.success(result.message);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\" handleAddServicePlan err\", err);\r\n      });\r\n    return res;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Drawer anchor=\"right\" variant=\"temporary\" open={open} onClose={onClose}>\r\n        <div className=\"service-plan-add-container\">\r\n          <div className=\"service-plan-add-header\">\r\n            <Button onClick={onClose}>\r\n              <ArrowBackIosIcon />\r\n            </Button>\r\n            <h2>{translate(\"consultant_add_service_plan\")}</h2>\r\n          </div>\r\n          <Formik\r\n            initialValues={{\r\n              planName: get(dialogData, \"rowData.planName\", \"\"),\r\n              numberOfConsultant: get(\r\n                dialogData,\r\n                \"rowData.numberOfConsultant\",\r\n                \"\"\r\n              ),\r\n              sessionName: get(dialogData, \"rowData.sessionName\", \"\"),\r\n              onlineConsultation: get(\r\n                dialogData,\r\n                \"rowData.onlineConsultation\",\r\n                false\r\n              ),\r\n              offlineConsultation: get(\r\n                dialogData,\r\n                \"rowData.offlineConsultation\",\r\n                false\r\n              ),\r\n              phoneConsultation: get(\r\n                dialogData,\r\n                \"rowData.phoneConsultation\",\r\n                false\r\n              ),\r\n              currencyId: get(dialogData, \"rowData.currencyId\", \"\"),\r\n              amount: get(dialogData, \"rowData.amount\", \"\"),\r\n              timeUnit: get(dialogData, \"rowData.timeUnit\", 30),\r\n              dietPlan: get(dialogData, \"rowData.dietPlan\", true),\r\n              details: get(dialogData, \"rowData.details\", \"\"),\r\n            }}\r\n            validationSchema={schemaObj}\r\n            onSubmit={(values) => {\r\n              const checkAcceptType =\r\n                values.onlineConsultation ||\r\n                values.phoneConsultation ||\r\n                values.offlineConsultation;\r\n\r\n              if (allServiceType) {\r\n                if (checkAcceptType) {\r\n                  handleAddServicePlan(values);\r\n                } else {\r\n                  toast.error(\"Required select on service type\", {\r\n                    autoClose: false,\r\n                  });\r\n                }\r\n              } else {\r\n                toast.error(\r\n                  \"Please Setup Your Profile First Then Create Service Plan\",\r\n                  {\r\n                    autoClose: false,\r\n                  }\r\n                );\r\n              }\r\n            }}\r\n          >\r\n            {(props) => (\r\n              <form\r\n                onSubmit={props.handleSubmit}\r\n                className=\"d-flex flex-column overflow-auto\"\r\n              >\r\n                <DialogContent dividers>\r\n                  <Grid container spacing={2}>\r\n                    <Grid item xs={12} md={6}  className=\"\">\r\n                      <TextField\r\n                        label={translate(\"consultant_service_plan_name\")}\r\n                        variant=\"outlined\"\r\n                        name=\"planName\"\r\n                        value={props.values.planName}\r\n                        onChange={props.handleChange}\r\n                        onBlur={props.handleBlur}\r\n                        error={\r\n                          props.errors.planName && props.touched.planName\r\n                            ? true\r\n                            : false\r\n                        }\r\n                        helperText={\r\n                          props.errors.planName && props.touched.planName\r\n                            ? props.errors.planName\r\n                            : null\r\n                        }\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} md={6}>\r\n                      <FormControl component=\"fieldset\" variant=\"standard\">\r\n                        <FormLabel>\r\n                          {translate(\"consultant_consultation_type\")}\r\n                        </FormLabel>\r\n                        <FormGroup row>\r\n                          <FormControlLabel\r\n                            value=\"online\"\r\n                            control={\r\n                              <Checkbox\r\n                                name=\"onlineConsultation\"\r\n                                checked={props.values.onlineConsultation}\r\n                                onChange={props.handleChange}\r\n                              />\r\n                            }\r\n                            disabled={!serviceTypeOnline}\r\n                            label={translate(\"common_online\")}\r\n                          />\r\n                          <FormControlLabel\r\n                            control={\r\n                              <Checkbox\r\n                                name=\"offlineConsultation\"\r\n                                checked={props.values.offlineConsultation}\r\n                                onChange={props.handleChange}\r\n                              />\r\n                            }\r\n                            disabled={!serviceTypeOffline}\r\n                            label={translate(\"common_offline\")}\r\n                          />\r\n                          <FormControlLabel\r\n                            control={\r\n                              <Checkbox\r\n                                name=\"phoneConsultation\"\r\n                                checked={props.values.phoneConsultation}\r\n                                onChange={props.handleChange}\r\n                              />\r\n                            }\r\n                            disabled={!serviceTypePhone}\r\n                            label={translate(\"common_phone\")}\r\n                          />\r\n                        </FormGroup>\r\n                        {props.errors.onlineConsultation &&\r\n                          props.touched.onlineConsultation && (\r\n                            <FormHelperText error>\r\n                              Type is Required\r\n                            </FormHelperText>\r\n                          )}\r\n                      </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} md={6}>\r\n                      <TextField\r\n                        label={translate(\"consultant_number_of_consultation\")}\r\n                        variant=\"outlined\"\r\n                        name=\"numberOfConsultant\"\r\n                        value={props.values.numberOfConsultant}\r\n                        onChange={props.handleChange}\r\n                        onBlur={props.handleBlur}\r\n                        error={\r\n                          props.errors.numberOfConsultant &&\r\n                          props.touched.numberOfConsultant\r\n                            ? true\r\n                            : false\r\n                        }\r\n                        helperText={\r\n                          props.errors.numberOfConsultant &&\r\n                          props.touched.numberOfConsultant\r\n                            ? props.errors.numberOfConsultant\r\n                            : null\r\n                        }\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} md={6}>\r\n                      <FormControl fullWidth>\r\n                        <InputLabel id=\"demo-simple-select-label\">\r\n                          {translate(\"consultant_consultant_sessions\")}\r\n                        </InputLabel>\r\n                        <Select\r\n                          labelId=\"demo-simple-select-label\"\r\n                          id=\"demo-simple-select\"\r\n                          name=\"sessionName\"\r\n                          value={props.values.sessionName}\r\n                          label={translate(\"consultant_consultant_sessions\")}\r\n                          onChange={props.handleChange}\r\n                          disabled={\r\n                            parseInt(props.values.numberOfConsultant, 10) === 1\r\n                          }\r\n                        >\r\n                          {map(consultantSessionsList, (item, index) => (\r\n                            <MenuItem value={item.label} key={index}>\r\n                              {item.label}\r\n                            </MenuItem>\r\n                          ))}\r\n                        </Select>\r\n                        {props.errors.sessionName &&\r\n                        props.touched.sessionName ? (\r\n                          <FormHelperText error>\r\n                            {props.errors.sessionName}\r\n                          </FormHelperText>\r\n                        ) : null}\r\n                      </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item  xs={12} md={6}>\r\n                      <Autocomplete\r\n                        getOptionLabel={(option) => {\r\n                          return !isEmpty(option) ? option.currency : \"\";\r\n                        }}\r\n                        options={currencyList}\r\n                        name=\"currencyId\"\r\n                        value={props.values.currencyId}\r\n                        isOptionEqualToValue={(option, value) => {\r\n                          if (value === \"\" || option._id === value._id) {\r\n                            return true;\r\n                          }\r\n                        }}\r\n                        onChange={(e, value) => {\r\n                          props.setFieldValue(\"currencyId\", value);\r\n                        }}\r\n                        disablePortal\r\n                        autoHighlight\r\n                        disableClearable\r\n                        noOptionsText={translate(\"common_no_data\")}\r\n                        popupIcon={<KeyboardArrowDownSharpIcon />}\r\n                        renderOption={(props, option) => (\r\n                          <Box\r\n                            key={option._id}\r\n                            component=\"li\"\r\n                            sx={{ \"& > img\": { mr: 1, flexShrink: 0 } }}\r\n                            {...props}\r\n                          >\r\n                            <Box component=\"span\" mr={1}>\r\n                              {option.currency}\r\n                            </Box>\r\n                            {option.currencySymbol}\r\n                          </Box>\r\n                        )}\r\n                        renderInput={(params) => (\r\n                          <TextField\r\n                            {...params}\r\n                            label={translate(\"consultant_currency_type\")}\r\n                            name=\"currencyId\"\r\n                            error={\r\n                              props.errors.currencyId &&\r\n                              props.touched.currencyId\r\n                                ? true\r\n                                : false\r\n                            }\r\n                            helperText={\r\n                              props.errors.currencyId &&\r\n                              props.touched.currencyId\r\n                                ? props.errors.currencyId\r\n                                : null\r\n                            }\r\n                          />\r\n                        )}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item  xs={12} md={6}>\r\n                      <TextField\r\n                        label={translate(\"consultant_amount\")}\r\n                        variant=\"outlined\"\r\n                        name=\"amount\"\r\n                        value={props.values.amount}\r\n                        onChange={props.handleChange}\r\n                        onBlur={props.handleBlur}\r\n                        inputProps={{ type: \"number\" }}\r\n                        error={\r\n                          props.errors.amount && props.touched.amount\r\n                            ? true\r\n                            : false\r\n                        }\r\n                        helperText={\r\n                          props.errors.amount && props.touched.amount\r\n                            ? props.errors.amount\r\n                            : null\r\n                        }\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6}>\r\n                      <FormControl fullWidth>\r\n                        <FormLabel htmlFor=\"weight\" className=\"mb-1\">\r\n                          {translate(\"consultant_time_duration\")}\r\n                        </FormLabel>\r\n\r\n                        <RadioGroup\r\n                          name=\"timeUnit\"\r\n                          value={props.values.timeUnit}\r\n                          onChange={(e, value) => {\r\n                            props.setFieldValue(\"timeUnit\", value);\r\n                          }}\r\n                          row\r\n                          sx={{ marginLeft: \"10px\", marginTop: \"10px\" }}\r\n                        >\r\n                          <FormControlLabel\r\n                            value={30}\r\n                            control={<CMRadio />}\r\n                            label={\r\n                              \"30 \" + translate(\"common_time_length_minute\")\r\n                            }\r\n                          />\r\n                          <FormControlLabel\r\n                            value={45}\r\n                            control={<CMRadio />}\r\n                            label={\r\n                              \"45 \" + translate(\"common_time_length_minute\")\r\n                            }\r\n                          />\r\n                          <FormControlLabel\r\n                            value={60}\r\n                            control={<CMRadio />}\r\n                            label={\"1 \" + translate(\"common_time_length_hour\")}\r\n                          />\r\n                        </RadioGroup>\r\n                      </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6}>\r\n                      <FormControl fullWidth>\r\n                        <FormLabel htmlFor=\"weight\" className=\"mb-1\">\r\n                          {translate(\"common_diet_plan\")}\r\n                        </FormLabel>\r\n                      </FormControl>\r\n                      <FormControl fullWidth>\r\n                        <RadioGroup\r\n                          name=\"dietPlan\"\r\n                          value={props.values.dietPlan}\r\n                          onChange={(e, value) => {\r\n                            props.setFieldValue(\"dietPlan\", value);\r\n                          }}\r\n                          row\r\n                          sx={{ marginLeft: \"10px\", marginTop: \"10px\" }}\r\n                        >\r\n                          <FormControlLabel\r\n                            value={true}\r\n                            control={<CMRadio />}\r\n                            label={translate(\"common_type_yes\")}\r\n                          />\r\n                          <FormControlLabel\r\n                            value={false}\r\n                            control={<CMRadio />}\r\n                            label={translate(\"common_type_no\")}\r\n                          />\r\n                        </RadioGroup>\r\n                      </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                      <RichTextEditor\r\n                        name=\"details\"\r\n                        value={props.values.details}\r\n                        setFieldValue={props.setFieldValue}\r\n                        error={\r\n                          props.errors.details && props.touched.details\r\n                            ? true\r\n                            : false\r\n                        }\r\n                        helperText={\r\n                          props.errors.details && props.touched.details\r\n                            ? props.errors.details\r\n                            : null\r\n                        }\r\n                      />\r\n                    </Grid>\r\n\r\n                  </Grid>\r\n                </DialogContent>\r\n                <DialogActions style={{ marginBottom: \"10px\" }}>\r\n               \r\n                  <Button variant=\"contained\" type=\"submit\">\r\n                    {translate(\"common_add\")}\r\n                  </Button>\r\n                 \r\n                </DialogActions>\r\n              </form>\r\n            )}\r\n          </Formik>\r\n        </div>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ServicePlanAdd;\r\n","import React, { useState } from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport \"./RightModal.css\";\r\nimport { get, isEmpty } from \"lodash\";\r\nimport moment from \"moment\";\r\nimport { Drawer } from \"@mui/material\";\r\nimport Button from \"@mui/material/Button\";\r\nimport ArrowBackIosIcon from \"@mui/icons-material/ArrowBackIos\";\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nconst ServiceplanDetail = (props) => {\r\n\tconst { open, onClose, dialogData } = props;\r\n\r\n\tlet filterString = get(dialogData, \"rowData.details\", \"\");\r\n\t// let strippedString = filterString?.replace(/<[^>]+>/g, \"\");\r\n\r\n\tconst [isFullTextVisible, setIsFullTextVisible] = useState(false);\r\n\r\n\tfunction getDisplayText() {\r\n\t\tif (isFullTextVisible) {\r\n\t\t\treturn filterString && filterString;\r\n\t\t} else {\r\n\t\t\tconst words = (filterString && filterString).split(\" \");\r\n\t\t\tconst truncatedWords = words.slice(0, 94);\r\n\t\t\tconst truncatedText = truncatedWords.join(\" \");\r\n\t\t\treturn truncatedText;\r\n\t\t}\r\n\t}\r\n\r\n\tconst parseHtmlContent = (htmlString) => {\r\n\t\tconst parser = new DOMParser();\r\n\t\tconst parsedHtml = parser.parseFromString(htmlString, 'text/html');\r\n\t\treturn parsedHtml.body;\r\n\t  };\r\n\t\r\n\t  const renderHtmlElements = (htmlBody) => {\r\n\t\tconst children = [];\r\n\t\r\n\r\n\t\tfor (const childNode of htmlBody.childNodes) {\r\n\t\t  if (childNode.nodeType === Node.TEXT_NODE) {\r\n\t\t\tchildren.push(childNode.textContent);\r\n\t\t  } else if (childNode.nodeType === Node.ELEMENT_NODE) {\r\n\t\t\tchildren.push(\r\n\t\t\t  React.createElement(\r\n\t\t\t\tchildNode.tagName.toLowerCase(),\r\n\t\t\t\t{},\r\n\t\t\t\trenderHtmlElements(childNode)\r\n\t\t\t  )\r\n\t\t\t);\r\n\t\t  }\r\n\t\t}\r\n\t\t\t\r\n\t\treturn children;\r\n\t  };\r\n\r\n\t//   const renderedElements = renderHtmlElements(parseHtmlContent(getDisplayText()));\r\n\t\r\n\t \r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Drawer\r\n\t\t\t\tanchor=\"right\"\r\n\t\t\t\topen={open}\r\n\t\t\t\tonClose={onClose}\r\n\t\t\t\tclassName=\"plan-details-design\"\r\n\t\t\t>\r\n\t\t\t\t<div className=\"service-plan-add-header\" >\r\n\t\t\t\t\t{/* <Typography variant=\"h6\">Plan Details</Typography> */}\r\n\t\t\t\t\t<Button onClick={onClose}>\r\n\t\t\t\t\t\t<ArrowBackIosIcon />\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<h2>Plan Details</h2>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div style={{width:\"100%\",height:\"2px\", backgroundColor:\"#0000001f\"}}></div>\r\n\t\t\t\t<div className=\"plan_details drawer-content\">\r\n\t\t\t\t\t<Grid container spacing={2}>\r\n\t\t\t\t\t\t<Grid item xs={12} sm={12}>\r\n\t\t\t\t\t\t\t<Grid container spacing={2}>\r\n\t\t\t\t\t\t\t\t<Grid item xs={5} md={5}>\r\n\t\t\t\t\t\t\t\t\t<Typography variant=\"subtitle1\" color=\"text.primary\">\r\n\t\t\t\t\t\t\t\t\t\tPlan Name\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\r\n\t\t\t\t\t\t\t\t\t<Typography variant=\"body1\">\r\n\t\t\t\t\t\t\t\t\t\t{get(dialogData, \"rowData.planName\", \"\")}\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t\t\t<Grid item xs={4} md={4}>\r\n\t\t\t\t\t\t\t\t\t<Typography variant=\"subtitle1\" color=\"text.primary\">\r\n\t\t\t\t\t\t\t\t\t\tConsultation Sessions\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\r\n\t\t\t\t\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t\t\t\t\t<Chip\r\n\t\t\t\t\t\t\t\t\t\t\tlabel={get(dialogData, \"rowData.sessionName\", \"\")}\r\n\t\t\t\t\t\t\t\t\t\t\tsx={{\r\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: \"secondary.lighter\",\r\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: \"secondary.dark\",\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t\t\t<Grid item xs={3} md={3}>\r\n\t\t\t\t\t\t\t\t\t<Typography variant=\"subtitle1\" color=\"text.primary\">\r\n\t\t\t\t\t\t\t\t\t\tDuration\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\r\n\t\t\t\t\t\t\t\t\t<Typography variant=\"body1\">\r\n\t\t\t\t\t\t\t\t\t\t{get(dialogData, \"rowData.timeUnit\", \"\")} Min\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t\t\t\r\n\r\n\t\t\t\t\t\t\t\t<Grid item xs={5} md={5}>\r\n\t\t\t\t\t\t\t\t\t<Typography variant=\"subtitle1\" color=\"text.primary\">\r\n\t\t\t\t\t\t\t\t\t\tPost Consultation plan (included)\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\r\n\t\t\t\t\t\t\t\t\t<Chip\r\n\t\t\t\t\t\t\t\t\t\tlabel={\r\n\t\t\t\t\t\t\t\t\t\t\tget(dialogData, \"rowData.dietPlan\", false) ? \"Yes\" : \"No\"\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tsx={{\r\n\t\t\t\t\t\t\t\t\t\t\tborder: \"1px solid\",\r\n\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: \"transparent\",\r\n\t\t\t\t\t\t\t\t\t\t\tborderColor: \"secondary.main\",\r\n\t\t\t\t\t\t\t\t\t\t\tcolor: \"secondary.main\",\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t\t\t<Grid item xs={4} md={4}>\r\n\t\t\t\t\t\t\t\t\t<Typography variant=\"subtitle1\" color=\"text.primary\">\r\n\t\t\t\t\t\t\t\t\t\tService Charges\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\r\n\t\t\t\t\t\t\t\t\t<Typography variant=\"body1\">\r\n\t\t\t\t\t\t\t\t\t\t{get(dialogData, \"rowData.amount\", \"\")}{\" \"}\r\n\t\t\t\t\t\t\t\t\t\t{get(dialogData, \"rowData.currencyId.currencySymbol\", \"\")}\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t\t\t<Grid item xs={3} md={3}>\r\n\t\t\t\t\t\t\t\t\t<Typography variant=\"subtitle1\" color=\"text.primary\">\r\n\t\t\t\t\t\t\t\t\t\tNumber of Consultant\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\r\n\t\t\t\t\t\t\t\t\t<Typography variant=\"body1\">\r\n\t\t\t\t\t\t\t\t\t\t{get(dialogData, \"rowData.numberOfConsultant\", \"\")}\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t\t\t<Grid item xs={5} md={5}>\r\n\t\t\t\t\t\t\t\t\t<Typography variant=\"subtitle1\" color=\"text.primary\">\r\n\t\t\t\t\t\t\t\t\t\tConsultation Type\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\t\t\tvariant=\"body1\"\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ display: \"flex\", flexDirection: \"row\" }}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{dialogData?.rowData?.onlineConsultation && (\r\n\t\t\t\t\t\t\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Chip\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel={\"Online\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsx={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: \"secondary.lighter\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: \"secondary.dark\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarginRight: \"6px\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t{dialogData?.rowData?.offlineConsultation && (\r\n\t\t\t\t\t\t\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Chip\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel={\"Offline\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsx={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: \"secondary.lighter\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: \"secondary.dark\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarginRight: \"6px\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t{dialogData?.rowData?.phoneConsultation && (\r\n\t\t\t\t\t\t\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Chip\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel={\"Phone\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsx={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: \"secondary.lighter\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: \"secondary.dark\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarginRight: \"6px\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t\t\t<Grid item xs={4} md={4}>\r\n\t\t\t\t\t\t\t\t\t<Typography variant=\"subtitle1\" color=\"text.primary\">\r\n\t\t\t\t\t\t\t\t\t\tCreated Date\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t\t\t\t\t<Chip\r\n\t\t\t\t\t\t\t\t\t\t\tlabel={\r\n\t\t\t\t\t\t\t\t\t\t\t\tisEmpty(get(dialogData, \"rowData.createDate\", \"\"))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"Date Not Found\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t: moment(dialogData.rowData.createDate).format(\"LL\")\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tsx={{\r\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: \"secondary.lighter\",\r\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: \"secondary.dark\",\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t\t\t<Grid item xs={3} md={3}>\r\n\t\t\t\t\t\t\t\t\t<Typography variant=\"subtitle1\" color=\"text.primary\">\r\n\t\t\t\t\t\t\t\t\t\tLast Update Date\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t\t\t\t\t<Chip\r\n\t\t\t\t\t\t\t\t\t\t\tlabel={\r\n\t\t\t\t\t\t\t\t\t\t\t\tisEmpty(get(dialogData, \"rowData.updateDate\", \"\"))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"Not Updated\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t: moment(dialogData.rowData.updateDate).format(\"LL\")\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tsx={{\r\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: \"secondary.lighter\",\r\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: \"secondary.dark\",\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t{/* <Grid item xs={3} md={3}>\r\n\t\t\t\t\t\t\t\t\t<Typography variant=\"subtitle1\" color=\"text.primary\">\r\n\t\t\t\t\t\t\t\t\t\tTime Minutes\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\r\n\t\t\t\t\t\t\t\t\t<Typography variant=\"body1\">\r\n\t\t\t\t\t\t\t\t\t\t{get(dialogData, \"rowData.timeUnit\", \"\")}\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t</Grid> */}\r\n\r\n\t\t\t\t\t\t\t\t<Grid item xs={12} md={12}>\r\n\t\t\t\t\t\t\t\t\t<Typography variant=\"subtitle1\" color=\"text.primary\">\r\n\t\t\t\t\t\t\t\t\t\tDetails\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t{/* {renderedElements} */}\r\n\t\t\t\t\t\t\t\t\t<div dangerouslySetInnerHTML={{ __html: getDisplayText() }} />\r\n\t\t\t\t\t\t\t\t\t{/* <Typography variant=\"body1\">\r\n\t\t\t\t\t\t\t\t\t\t{getDisplayText()}....\r\n\t\t\t\t\t\t\t\t\t</Typography> */}\r\n\t\t\t\t\t\t\t\t\t{(filterString && filterString).split(\"\").length >\r\n\t\t\t\t\t\t\t\t\t\t94 && (\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t{!isFullTextVisible ? (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Button onClick={() => setIsFullTextVisible(true)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tRead More\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Button onClick={() => setIsFullTextVisible(false)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tRead Less\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</div>\r\n\t\t\t</Drawer>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default ServiceplanDetail;\r\n","import React from \"react\";\r\nimport PercentIcon from \"@mui/icons-material/Percent\";\r\nimport Button from \"@mui/material/Button\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport Radio from \"@mui/material/Radio\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { Formik } from \"formik\";\r\nimport { get } from \"lodash\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport * as Yup from \"yup\";\r\nimport { Drawer } from \"@mui/material\";\r\nimport {\r\n  getRefundPolicy,\r\n  postRefundPolicyAdd,\r\n} from \"../../../../store/slice/dashboard/servicePlanSlice\";\r\nimport translate from \"../../../hooks/translate\";\r\nimport RichTextEditor from \"../../../ui-components/editor/RichTextEditor\";\r\nimport KeyboardArrowDownSharpIcon from \"@mui/icons-material/KeyboardArrowDownSharp\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\n\r\nimport useContextData from \"../../../hooks/useContextData\";\r\nimport ArrowBackIosIcon from \"@mui/icons-material/ArrowBackIos\";\r\n\r\nconst TermsPolicyForm = (props) => {\r\n  const { open, onClose, type } = props;\r\n  const dispatch = useDispatch();\r\n  const refundPolicy = useSelector((state) => state.servicePlan.refundPolicy);\r\n  const { GetLanguageList } = useContextData();\r\n  const LanguageList = GetLanguageList();\r\n\r\n  const schemaObj = Yup.object().shape({\r\n    content: Yup.string().required(\r\n      translate(\"consultant_error_terms_and_policy_required\")\r\n    ),\r\n    language: Yup.object()\r\n      .shape()\r\n      .required(translate(\"consultant_error_languages_required\"))\r\n      .nullable(),\r\n    refundMethod: Yup.string().required(translate(\"common_error_required\")),\r\n    percentage: Yup.number().when(\"refundMethod\", {\r\n      is: (value) => value === \"PRO_RATE_CANCEL_CHARGE\",\r\n      then: Yup.number()\r\n        .min(0, translate(\"consultant_error_minimum_value_0\"))\r\n        .max(100, translate(\"consultant_error_maximum_value_100\"))\r\n        .positive(translate(\"consultant_error_enter_positive_number\"))\r\n        .required(translate(\"consultant_error_percentage_required\")),\r\n      otherwise: Yup.number().notRequired(),\r\n    }),\r\n  });\r\n\r\n  const handleTermsCondition = (data) => {\r\n    const payload =\r\n      type === \"edit\"\r\n        ? {\r\n            ...data,\r\n            _id: refundPolicy._id,\r\n            language: data?.language?._id,\r\n          }\r\n        : { ...data, language: data?.language?._id };\r\n    dispatch(postRefundPolicyAdd(payload))\r\n      .unwrap()\r\n      .then((result) => {\r\n        if (get(result, \"status\", false)) {\r\n          toast.success(result.message);\r\n          dispatch(getRefundPolicy());\r\n          onClose();\r\n        } else {\r\n          toast.error(result.message);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Drawer\r\n        anchor=\"right\"\r\n        open={open}\r\n        onClose={onClose}\r\n        className=\"terms-details-design\"\r\n      >\r\n        <div className=\"service-plan-add-header\">\r\n          <Button onClick={onClose}>\r\n            <ArrowBackIosIcon />\r\n          </Button>\r\n          <h2 style={{marginRight : \"20px\"}}>\r\n          {translate(\"consultant_terms_and_policy\")}\r\n          </h2>\r\n        </div>\r\n\r\n        <Formik\r\n          initialValues={{\r\n            content: get(refundPolicy, \"content\", \"\"),\r\n            refundMethod: get(refundPolicy, \"refundMethod\", \"PRO_RATE\"),\r\n            percentage: get(refundPolicy, \"percentage\", 0),\r\n            language: get(refundPolicy, \"language\", \"\"),\r\n          }}\r\n          validationSchema={schemaObj}\r\n          onSubmit={(values) => {\r\n            handleTermsCondition(values);\r\n          }}\r\n        >\r\n          {(props) => (\r\n            <form\r\n              onSubmit={props.handleSubmit}\r\n              className=\"d-flex flex-column overflow-auto\"\r\n            >\r\n              <DialogContent>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12}>\r\n                    <RichTextEditor\r\n                      name=\"content\"\r\n                      value={props.values.content}\r\n                      setFieldValue={props.setFieldValue}\r\n                      error={\r\n                        props.errors.content && props.touched.content\r\n                          ? true\r\n                          : false\r\n                      }\r\n                      helperText={\r\n                        props.errors.content && props.touched.content\r\n                          ? props.errors.content\r\n                          : null\r\n                      }\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} className=\"pt-3\">\r\n                    <FormControl fullWidth>\r\n                      <FormLabel htmlFor=\"language\" className=\"mb-3\">\r\n                        {translate(\"common_language\")}\r\n                      </FormLabel>\r\n\r\n                      <Autocomplete\r\n                        getOptionLabel={(option) => {\r\n                          return option.title ?? \"\";\r\n                        }}\r\n                        options={LanguageList}\r\n                        name=\"language\"\r\n                        value={\r\n                          typeof props.values.language === \"string\"\r\n                            ? LanguageList.find(\r\n                                (option) => option._id === props.values.language\r\n                              )\r\n                            : props.values.language\r\n                        }\r\n                        isOptionEqualToValue={(option, value) => {\r\n                          if (value === \"\" || option._id === value._id) {\r\n                            return true;\r\n                          }\r\n                        }}\r\n                        onChange={(_e, value) => {\r\n                          props.setFieldValue(\"language\", value);\r\n                        }}\r\n                        onBlur={props.handleBlur}\r\n                        disablePortal\r\n                        autoHighlight\r\n                        disableClearable\r\n                        noOptionsText={translate(\"common_no_data\")}\r\n                        popupIcon={<KeyboardArrowDownSharpIcon />}\r\n                        renderInput={(params) => (\r\n                          <TextField\r\n                            {...params}\r\n                            placeholder={translate(\r\n                              \"consultant_select_language\"\r\n                            )}\r\n                            name=\"language\"\r\n                            error={\r\n                              props.errors.language && props.touched.language\r\n                                ? true\r\n                                : false\r\n                            }\r\n                            helperText={\r\n                              props.errors.language && props.touched.language\r\n                                ? props.errors.language\r\n                                : null\r\n                            }\r\n                          />\r\n                        )}\r\n                      />\r\n                    </FormControl>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} sm={6} className=\"pt-3\">\r\n                    <FormControl fullWidth>\r\n                      <FormLabel className=\"mb-1\">\r\n                        {translate(\"consultant_refund_method\")}\r\n                      </FormLabel>\r\n                      <RadioGroup\r\n                        name=\"refundMethod\"\r\n                        value={props.values.refundMethod}\r\n                        onChange={(e, value) => {\r\n                          props.setFieldValue(\"refundMethod\", value);\r\n                          props.setFieldValue(\"percentage\", 0);\r\n                        }}\r\n                        row\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"PRO_RATE\"\r\n                          control={<Radio />}\r\n                          label={translate(\"consultant_only_pro_rate\")}\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"PRO_RATE_CANCEL_CHARGE\"\r\n                          control={<Radio />}\r\n                          label={translate(\r\n                            \"consultant_pro_rate_and_cancellation_charges\"\r\n                          )}\r\n                        />\r\n                      </RadioGroup>\r\n                    </FormControl>\r\n                  </Grid>\r\n\r\n                  {props.values.refundMethod === \"PRO_RATE_CANCEL_CHARGE\" && (\r\n                    <Grid item md={4} sm={6} xs={12}>\r\n                      <Typography variant=\"body1\" className=\"mb-2\">\r\n                        {translate(\"consultant_enter_percentage\")}\r\n                      </Typography>\r\n                      <TextField\r\n                        placeholder=\"percentage\"\r\n                        variant=\"outlined\"\r\n                        name=\"percentage\"\r\n                        value={props.values.percentage}\r\n                        onChange={props.handleChange}\r\n                        onBlur={props.handleBlur}\r\n                        inputProps={{ type: \"number\" }}\r\n                        InputProps={{\r\n                          endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                              <PercentIcon />\r\n                            </InputAdornment>\r\n                          ),\r\n                        }}\r\n                        error={\r\n                          props.errors.percentage && props.touched.percentage\r\n                            ? true\r\n                            : false\r\n                        }\r\n                        helperText={\r\n                          props.errors.percentage && props.touched.percentage\r\n                            ? props.errors.percentage\r\n                            : null\r\n                        }\r\n                      />\r\n                    </Grid>\r\n                  )}\r\n                </Grid>\r\n              </DialogContent>\r\n              <DialogActions style={{marginBottom:\"10px\"}}>  \r\n                <Button variant=\"contained\" type=\"submit\">\r\n                  {translate(\"common_btn_submit\")}\r\n                </Button>\r\n              </DialogActions>\r\n            </form>\r\n          )}\r\n        </Formik>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TermsPolicyForm;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport Button from \"@mui/material/Button\";\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nimport { isEmpty } from \"lodash\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { getRefundPolicy } from \"../../../../store/slice/dashboard/servicePlanSlice\";\r\nimport translate from \"../../../hooks/translate\";\r\nimport TermsPolicyForm from \"./TermsPolicyForm\";\r\n\r\nconst TermsPolicySetup = () => {\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector((state) => state.servicePlan.refundPolicyLoading);\r\n  const refundPolicy = useSelector((state) => state.servicePlan.refundPolicy);\r\n\r\n  const handleOpen = () => {\r\n    setDialogOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setDialogOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getRefundPolicy());\r\n  }, [dispatch]);\r\n  return (\r\n    <>\r\n      {/* <Paper variant=\"outlined\" className=\"py-2 px-3\"> */}\r\n        {loading ? (\r\n          <LinearProgress />\r\n        ) : (\r\n          <Stack\r\n            direction={{ xs: \"column\", sm: \"row\" }}\r\n            spacing={1}\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Button variant=\"outlined\" onClick={() => handleOpen()}>\r\n              {isEmpty(refundPolicy) ? translate(\"consultant_setup_terms_and_policy\") : translate(\"consultant_setup_terms_and_policy\")}\r\n            </Button>\r\n\r\n            <TermsPolicyForm\r\n              open={dialogOpen}\r\n              onClose={handleClose}\r\n              type={isEmpty(refundPolicy) ? \"add\" : \"edit\"}\r\n            />\r\n          </Stack>\r\n        )}\r\n      {/* </Paper> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TermsPolicySetup;\r\n","import * as React from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Menu from \"@mui/material/Menu\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport Fade from \"@mui/material/Fade\";\r\nimport { useState } from \"react\";\r\nimport FileDownloadIcon from \"@mui/icons-material/FileDownload\";\r\nimport SaveAltIcon from \"@mui/icons-material/SaveAlt\";\r\nimport { servicePlanPDFDownload } from \"../../../store/slice/dashboard/servicePlanSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { get } from \"lodash\";\r\nimport cookie from \"../../hooks/cookie\";\r\n\r\nexport default function ExportMenu({ APICall }) {\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const open = Boolean(anchorEl);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n//   const downloadPDFFile = (dataurl, filename) => {\r\n\r\n//     console.log('dataurl :>> ', dataurl);\r\n//     const link = document.createElement(\"a\");\r\n//     link.href = dataurl;\r\n//     link.download = filename;\r\n\r\n//     link.style.display = \"none\";\r\n//     document.body.appendChild(link);\r\n//     link.click();\r\n//     document.body.removeChild(link);\r\n//   };\r\n\r\n  const handlePDFExport = async() => {\r\n    const userData = cookie.get(\"consultant_data\");\r\n    try {\r\n         const response = await fetch(\r\n           `${process.env.REACT_APP_API_END_POINT}/consultant/consultation/service-plan/download-pdf`,\r\n           {\r\n             method: \"GET\",\r\n             headers: {\r\n               \"Content-Type\": \"application/pdf\",\r\n               Authorization: get(userData, \"token\",null),\r\n             },\r\n           }\r\n         );\r\n         if (response.ok) {\r\n           const blob = await response.blob();\r\n           const url = URL.createObjectURL(blob);\r\n           const link = document.createElement(\"a\");\r\n           link.href = url;\r\n           link.download = \"Service Plan.pdf\";\r\n           link.click();\r\n         } else {\r\n           console.error(\"Failed to download the PDF\");\r\n         }\r\n       } catch (error) {\r\n         console.error(error);\r\n       }\r\n       handleClose();\r\n\r\n//    dispatch(servicePlanPDFDownload())\r\n//       .then(async(response) => {\r\n//         console.log(\"result?.payload :>> \", response?.payload);\r\n//         // response.blob()\r\n//         if (response?.payload) {\r\n//             // const res =  response.blob()\r\n//             const blob = await response.blob();\r\n//             const url = URL.createObjectURL(blob);\r\n//             const link = document.createElement(\"a\");\r\n//             link.href = url;\r\n//             link.download = \"press_release.pdf\";\r\n//             link.click();\r\n//           } else {\r\n//             console.error(\"Failed to download the PDF\");\r\n//           }\r\n//         // if (result?.payload) {\r\n//         //   //   var url = window.URL.createObjectURL(blobObj);\r\n\r\n//         //   //   downloadPDFFile(\r\n//         //   //     URL.createObjectURL(\r\n//         //   //       new Blob(result?.payload, { type: \"application/pdf\" })\r\n//         //   //     ),\r\n//         //   //     `Service Plan.pdf`\r\n//         //   //   );\r\n//         //   downloadPDFFile(\r\n//         //     URL.createObjectURL(\r\n//         //       new Blob([result?.payload], {\r\n//         //         type: \"application/pdf\",\r\n//         //       })\r\n//         //     ),\r\n//         //     `Service Plan.pdf`\r\n//         //   );\r\n\r\n//         //   // downloadPDFFile(URL.createObjectURL(result?.payload), `Service Plan.pdf`)\r\n//         // }\r\n//       })\r\n//       .catch((err) => {\r\n//         console.log(\"err :>> \", err);\r\n//       });\r\n   \r\n  };\r\n\r\n  return (\r\n    <div style={{ marginRight: \"10px\" }}>\r\n      <Button\r\n        //   style={{ marginLeft: \"10px\" }}\r\n        id=\"fade-button\"\r\n        aria-controls={open ? \"fade-menu\" : undefined}\r\n        aria-haspopup=\"true\"\r\n        aria-expanded={open ? \"true\" : undefined}\r\n        onClick={handleClick}\r\n      >\r\n        <SaveAltIcon fontSize=\"small\" /> Export\r\n      </Button>\r\n      <Menu\r\n        id=\"fade-menu\"\r\n        MenuListProps={{\r\n          \"aria-labelledby\": \"fade-button\",\r\n        }}\r\n        anchorEl={anchorEl}\r\n        open={open}\r\n        onClose={handleClose}\r\n        TransitionComponent={Fade}\r\n      >\r\n        <MenuItem onClick={handleClose}>Download as CSV</MenuItem>\r\n        <MenuItem onClick={handlePDFExport}>Download as PDF</MenuItem>\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\r\n\r\nimport ArrowRightAltIcon from \"@mui/icons-material/ArrowRightAlt\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { Grid } from \"@mui/material\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nimport { get, isEmpty } from \"lodash\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport {\r\n  deleteServicePlan,\r\n  getServicePlan,\r\n  getServiceTypes,\r\n  servicePlanPDFDownload,\r\n  updateServicePlanStatus,\r\n} from \"../../../../store/slice/dashboard/servicePlanSlice\";\r\nimport Label from \"../../../common/Label\";\r\nimport CMDataGrid from \"../../../ui-components/data-grid/CMDataGrid\";\r\nimport CMDataGridToolbar from \"../../../ui-components/data-grid/CMDataGridToolbar\";\r\nimport EmptyTableRowOverlay from \"../../../ui-components/data-grid/EmptyTableRowOverlay\";\r\nimport ServicePlanAdd from \"./ServicePlanAdd\";\r\nimport ServiceplanDetail from \"./ServiceplanDetail\";\r\nimport translate from \"../../../hooks/translate\";\r\nimport TermsPolicySetup from \"../terms-and-policy/TermsPolicySetup\";\r\nimport ExportMenu from \"../../../ui-components/data-grid/ExportMenu\";\r\n\r\nexport default function ServicePlanList() {\r\n  const [open, setOpen] = useState(false);\r\n  const [viewOpen, setViewOpen] = useState(false);\r\n  const [rowId, setRowId] = useState(\"\");\r\n  const [dialogData, setDialogData] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const servicePlanData = useSelector((state) => state.servicePlan.details);\r\n  const serviceTypes = useSelector((state) => state.servicePlan.serviceTypes);\r\n  const isLoading = useSelector((state) => state.servicePlan.loading);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleDialogOpen = useCallback(() => {\r\n    setOpen(true);\r\n  }, []);\r\n\r\n  const handleDialogClose = useCallback(() => {\r\n    setOpen(false);\r\n  }, []);\r\n\r\n  const handleViewDialogOpen = useCallback(() => {\r\n    setViewOpen(true);\r\n  }, []);\r\n\r\n  const handleViewDialogClose = useCallback(() => {\r\n    setViewOpen(false);\r\n  }, []);\r\n\r\n  const serviceTypeOnline = get(serviceTypes, \"serviceTypeOnline\", false);\r\n  const serviceTypeOffline = get(serviceTypes, \"serviceTypeOffline\", false);\r\n  const serviceTypePhone = get(serviceTypes, \"serviceTypePhone\", false);\r\n\r\n  const handleDelete = useCallback(\r\n    (id) => {\r\n      dispatch(deleteServicePlan(id))\r\n        .unwrap()\r\n        .then((result) => {\r\n          if (result.status) {\r\n            dispatch(getServicePlan());\r\n            toast.success(result.message);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(\" handleAddServicePlan err\", err);\r\n        });\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const handleStatus = useCallback(\r\n    async (event, id) => {\r\n      setRowId(id);\r\n      const payload = {\r\n        _id: id,\r\n        status: event.target.checked,\r\n      };\r\n      const res = await dispatch(updateServicePlanStatus(payload))\r\n        .unwrap()\r\n        .then((result) => {\r\n          if (result.status) {\r\n            dispatch(getServicePlan());\r\n            toast.success(result.message);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Service plan update error=======>\", error);\r\n        });\r\n      return res;\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(getServicePlan());\r\n    dispatch(getServiceTypes());\r\n    // dispatch(servicePlanPDFDownload())\r\n  }, [dispatch]);\r\n\r\n  const tableColumns = useMemo(\r\n    () => [\r\n      {\r\n        field: \"planName\",\r\n        headerName: translate(\"consultant_service_plan_name\"),\r\n        width: 170,\r\n        minWidth: 160,\r\n      },\r\n      {\r\n        field: \"numberOfConsultant\",\r\n        headerName: translate(\"consultant_number_of_consultation\"),\r\n        width: 130,\r\n        minWidth: 120,\r\n        hide: true, // Set hide to true for the column\r\n      },\r\n      {\r\n        field: \"sessionName\",\r\n        headerName: translate(\"consultant_consultant_sessions\"),\r\n        width: 170,\r\n        minWidth: 120,\r\n        renderCell: (params) => (\r\n          <Box>\r\n            <Label color=\"secondary\">\r\n              {get(params, \"row.sessionName\", \"\")}\r\n            </Label>\r\n          </Box>\r\n        ),\r\n      },\r\n      {\r\n        field: \"currency\",\r\n        headerName: translate(\"consultant_currency_type\"),\r\n        width: 130,\r\n        minWidth: 120,\r\n        hide: true, // Set hide to true for the column\r\n        renderCell: (params) => (\r\n          <Typography\r\n            variant=\"body2\"\r\n            sx={{ display: \"flex\", alignItems: \"center\" }}\r\n          >\r\n            {get(params, \"row.currencyId.currency\", \"\")}\r\n            <Typography variant=\"body1\" component=\"span\" ml={0.5}>\r\n              {get(params, \"row.currencyId.currencySymbol\", \"\")}\r\n            </Typography>\r\n          </Typography>\r\n        ),\r\n      },\r\n      {\r\n        field: \"onlineConsultation, offlineConsultation, phoneConsultation\",\r\n        headerName: translate(\"consultant_consultation_type\"),\r\n        width: 130,\r\n        minWidth: 120,\r\n        hide: true, // Set hide to true for the column\r\n        renderCell: (params) => (\r\n          <Stack direction=\"column\" spacing={1}>\r\n            {console.log(\"params :>> \", params)}\r\n            <Stack direction=\"row\" spacing={1}>\r\n              {get(params, \"row.onlineConsultation\", false) && (\r\n                <Label color=\"secondary\">Online</Label>\r\n              )}\r\n              {get(params, \"row.offlineConsultation\", false) && (\r\n                <Label color=\"secondary\">Offline</Label>\r\n              )}\r\n            </Stack>\r\n            {get(params, \"row.phoneConsultation\", false) && (\r\n              <Label color=\"secondary\">Phone</Label>\r\n            )}\r\n          </Stack>\r\n        ),\r\n      },\r\n      {\r\n        field: \"timeUnit\",\r\n        headerName: translate(\"consultant_time_duration\"),\r\n        width: 130,\r\n        minWidth: 120,\r\n        renderCell: (params) => (\r\n          <Typography variant=\"subtitle2\">\r\n            {get(params, \"row.timeUnit\", \"\")} Min\r\n          </Typography>\r\n        ),\r\n      },\r\n      {\r\n        field: \"dietPlan\",\r\n        headerName: translate(\"common_diet_plan\"),\r\n        width: 150,\r\n        minWidth: 120,\r\n        renderCell: (params) => (\r\n          <Label color=\"secondary\" variant=\"outlined\">\r\n            {get(params, \"row.dietPlan\", false) ? \"Yes\" : \"No\"}\r\n          </Label>\r\n        ),\r\n      },\r\n      {\r\n        field: \"amount,currencyId\",\r\n        headerName: translate(\"common_service_charges\"),\r\n        width: 130,\r\n        minWidth: 120,\r\n        renderCell: (params) => (\r\n          <Typography\r\n            variant=\"body2\"\r\n            sx={{ display: \"flex\", alignItems: \"center\" }}\r\n          >\r\n            {get(params, \"row.amount\", \"\")}\r\n            <Typography variant=\"body1\" component=\"span\" ml={0.5}>\r\n              {get(params, \"row.currencyId.currencySymbol\", \"\")}\r\n            </Typography>\r\n          </Typography>\r\n        ),\r\n      },\r\n      // {\r\n      //   field: \"status\",\r\n      //   headerName: translate(\"Status\"),\r\n      //   width: 80,\r\n      //   renderCell: (params) => (\r\n      //     <Switch\r\n      //       checked={get(params, \"row.status\", true)}\r\n      //       onChange={(e) => handleStatus(e, params.row._id)}\r\n      //       disabled={rowId === params.row._id ? isLoading : false}\r\n      //       inputProps={{\r\n      //         \"aria-label\": `plan-status`,\r\n      //         role: \"switch\",\r\n      //       }}\r\n      //     />\r\n      //   ),\r\n      // },\r\n      {\r\n        field: \"Actions\",\r\n        headerName: translate(\"common_actions\"),\r\n        headerAlign: \"center\",\r\n        width: 200,\r\n        renderCell: (params) => {\r\n          return (\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              <Switch\r\n                checked={get(params, \"row.status\", true)}\r\n                onChange={(e) => handleStatus(e, params.row._id)}\r\n                disabled={rowId === params.row._id ? isLoading : false}\r\n                inputProps={{\r\n                  \"aria-label\": `plan-status`,\r\n                  role: \"switch\",\r\n                }}\r\n              />\r\n              <IconButton\r\n                onClick={() => {\r\n                  setDialogData({\r\n                    ...dialogData,\r\n                    rowData: params.row,\r\n                    formType: \"show\",\r\n                  });\r\n                  handleViewDialogOpen();\r\n                }}\r\n                color=\"primary\"\r\n                size=\"large\"\r\n              >\r\n                <RemoveRedEyeIcon />\r\n              </IconButton>\r\n              <IconButton\r\n                sx={{ color: \"success.dark\" }}\r\n                onClick={() => {\r\n                  setDialogData({\r\n                    ...dialogData,\r\n                    rowData: params.row,\r\n                    formType: \"update\",\r\n                  });\r\n                  handleDialogOpen();\r\n                }}\r\n              >\r\n                <EditIcon />\r\n              </IconButton>\r\n              <IconButton\r\n                color=\"error\"\r\n                onClick={() => handleDelete(params.row._id)}\r\n              >\r\n                <DeleteIcon />\r\n              </IconButton>\r\n            </Box>\r\n          );\r\n        },\r\n      },\r\n    ],\r\n    [\r\n      dialogData,\r\n      handleDelete,\r\n      handleDialogOpen,\r\n      handleStatus,\r\n      handleViewDialogOpen,\r\n      isLoading,\r\n      rowId,\r\n    ]\r\n  );\r\n\r\n  const CustomToolbar = () => {\r\n    return (\r\n      <CMDataGridToolbar align=\"right\" divider={true}>\r\n        {serviceTypeOnline ||\r\n        serviceTypeOffline ||\r\n        serviceTypePhone ? //   variant=\"contained\" //   onClick={() => { //     setDialogData({ //       ...dialogData,\r\n        // <Button\r\n        //       rowData: [],\r\n        //       formType: \"create\",\r\n        //     });\r\n        //     handleDialogOpen();\r\n        //   }}\r\n        // >\r\n        //   {translate(\"consultant_add_service_plan\")}\r\n        // </Button>\r\n        null : (\r\n          <Button\r\n            endIcon={<ArrowRightAltIcon />}\r\n            onClick={() => {\r\n              navigate(\"/dashboard/appointment/service-type\");\r\n            }}\r\n          >\r\n            {translate(\"consultant_setup\")}\r\n          </Button>\r\n        )}\r\n      </CMDataGridToolbar>\r\n    );\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Paper variant=\"outlined\" className=\"h-100 service-plan-design\">\r\n        {/* <Grid item xs={12} sm={12}> */}\r\n        <Grid container spacing={3}>\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            sm={12}\r\n            style={{\r\n              display: \"flex\",\r\n              marginTop: \"20px\",\r\n              marginRight: \"20px\",\r\n              marginBottom: \"0px\",\r\n              marginLeft: \"20px\",\r\n            }}\r\n          >\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              md={12}\r\n              style={{\r\n                display: \"flex\",\r\n                margin: \"0px 5px\",\r\n                justifyContent: \"flex-end\",\r\n              }}\r\n            >\r\n              <ExportMenu/>\r\n\r\n              <TermsPolicySetup />\r\n              {serviceTypeOnline || serviceTypeOffline || serviceTypePhone ? (\r\n                <Button\r\n                  style={{ marginLeft: \"10px\" }}\r\n                  variant=\"contained\"\r\n                  onClick={() => {\r\n                    setDialogData({\r\n                      ...dialogData,\r\n                      rowData: [],\r\n                      formType: \"create\",\r\n                    });\r\n                    handleDialogOpen();\r\n                  }}\r\n                >\r\n                  {translate(\"consultant_add_service_plan\")}\r\n                </Button>\r\n              ) : (\r\n                <Button\r\n                  endIcon={<ArrowRightAltIcon />}\r\n                  onClick={() => {\r\n                    navigate(\"/dashboard/appointment/service-type\");\r\n                  }}\r\n                >\r\n                  {translate(\"consultant_setup\")}\r\n                </Button>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <CardContent>\r\n          <CMDataGrid\r\n            rows={!isEmpty(servicePlanData) ? servicePlanData : []}\r\n            columns={tableColumns}\r\n            getRowId={(row) => row._id}\r\n            loading={isLoading}\r\n            components={{\r\n              Toolbar: CustomToolbar,\r\n              NoRowsOverlay: EmptyTableRowOverlay,\r\n              LoadingOverlay: LinearProgress,\r\n            }}\r\n            className=\"min-vh-100\"\r\n          />\r\n        </CardContent>\r\n        {/* </Grid> */}\r\n      </Paper>\r\n\r\n      <ServicePlanAdd\r\n        open={open}\r\n        onClose={handleDialogClose}\r\n        dialogData={dialogData}\r\n      />\r\n      <ServiceplanDetail\r\n        open={viewOpen}\r\n        onClose={handleViewDialogClose}\r\n        dialogData={dialogData}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport Grid from \"@mui/material/Grid\";\r\n\r\nimport ServicePlanList from \"./plans/ServicePlanList\";\r\nimport TermsPolicySetup from \"./terms-and-policy/TermsPolicySetup\";\r\n\r\nconst ServicePlansPage = () => {\r\n  return (\r\n    <>\r\n      <Grid container spacing={1}>\r\n        {/* <Grid item xs={12}>\r\n          <TermsPolicySetup />\r\n        </Grid> */}\r\n        <Grid item xs={12}>\r\n          <ServicePlanList />\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ServicePlansPage;\r\n","import React from \"react\";\r\n\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Box from \"@mui/material/Box\";\r\n\r\nimport PageHeader from \"../../components/common/PageHeader\";\r\nimport ServicePlansPage from \"../../components/dashboard/service-plans\";\r\nimport Page from \"../../components/common/Page\";\r\n\r\nconst ServiceAndPlans = () => {\r\n  return (\r\n    <>\r\n      <Page title=\"Service Plan | InspireMind\">\r\n        <Box component=\"section\" className=\"w-100\">\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <PageHeader\r\n                title=\"consultant_service_plan\"\r\n                variant=\"outlined\"\r\n                elevation={0}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Box>\r\n                <ServicePlansPage />\r\n              </Box>\r\n            </Grid> \r\n          </Grid>\r\n        </Box>\r\n      </Page>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ServiceAndPlans;\r\n"],"names":["consultantSessionsList","label","translate","props","open","onClose","dialogData","dispatch","useDispatch","currencyList","useSelector","state","common","serviceTypes","servicePlan","serviceTypeOnline","get","serviceTypeOffline","serviceTypePhone","allServiceType","useEffect","getCurrencyList","schemaObj","Yup","shape","planName","min","max","required","numberOfConsultant","sessionName","when","is","value","then","otherwise","timeUnit","dietPlan","currencyId","amount","details","handleAddServicePlan","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","payload","res","wrap","_context","prev","next","_id","postServicePlanAdd","unwrap","result","status","getServicePlan","toast","success","message","catch","err","console","log","sent","abrupt","stop","_x","apply","arguments","_jsx","_Fragment","children","Drawer","anchor","variant","_jsxs","className","Button","onClick","ArrowBackIosIcon","Formik","initialValues","onlineConsultation","offlineConsultation","phoneConsultation","validationSchema","onSubmit","values","checkAcceptType","error","autoClose","handleSubmit","DialogContent","dividers","Grid","container","spacing","item","xs","md","TextField","name","onChange","handleChange","onBlur","handleBlur","errors","touched","helperText","FormControl","component","FormLabel","FormGroup","row","FormControlLabel","control","Checkbox","checked","disabled","FormHelperText","fullWidth","InputLabel","id","Select","labelId","parseInt","map","index","MenuItem","Autocomplete","getOptionLabel","option","isEmpty","currency","options","isOptionEqualToValue","e","setFieldValue","disablePortal","autoHighlight","disableClearable","noOptionsText","popupIcon","KeyboardArrowDownSharpIcon","renderOption","Box","_objectSpread","sx","mr","flexShrink","currencySymbol","renderInput","params","inputProps","type","sm","htmlFor","RadioGroup","marginLeft","marginTop","CMRadio","RichTextEditor","DialogActions","style","marginBottom","_dialogData$rowData","_dialogData$rowData2","_dialogData$rowData3","filterString","_useState","useState","_useState2","_slicedToArray","isFullTextVisible","setIsFullTextVisible","width","height","backgroundColor","Typography","color","Chip","border","borderColor","display","flexDirection","rowData","marginRight","moment","createDate","format","updateDate","dangerouslySetInnerHTML","__html","split","slice","join","length","refundPolicy","LanguageList","GetLanguageList","useContextData","content","language","nullable","refundMethod","percentage","positive","notRequired","data","_data$language","_data$language2","postRefundPolicyAdd","getRefundPolicy","handleTermsCondition","_option$title","title","find","_e","placeholder","Radio","InputProps","endAdornment","InputAdornment","position","PercentIcon","dialogOpen","setDialogOpen","loading","refundPolicyLoading","LinearProgress","Stack","direction","alignItems","justifyContent","TermsPolicyForm","ExportMenu","APICall","anchorEl","setAnchorEl","Boolean","handleClose","handlePDFExport","_ref2","userData","response","blob","url","link","cookie","fetch","concat","process","method","headers","Authorization","ok","URL","createObjectURL","document","createElement","href","download","click","t0","undefined","event","currentTarget","SaveAltIcon","fontSize","Menu","MenuListProps","TransitionComponent","Fade","ServicePlanList","setOpen","_useState3","_useState4","viewOpen","setViewOpen","_useState5","_useState6","rowId","setRowId","_useState7","_useState8","setDialogData","servicePlanData","isLoading","navigate","useNavigate","handleDialogOpen","useCallback","handleDialogClose","handleViewDialogOpen","handleViewDialogClose","handleDelete","deleteServicePlan","handleStatus","target","updateServicePlanStatus","_x2","getServiceTypes","tableColumns","useMemo","field","headerName","minWidth","hide","renderCell","Label","ml","headerAlign","Switch","role","IconButton","formType","size","RemoveRedEyeIcon","EditIcon","DeleteIcon","Paper","margin","TermsPolicySetup","endIcon","ArrowRightAltIcon","CardContent","CMDataGrid","rows","columns","getRowId","components","Toolbar","CMDataGridToolbar","align","divider","NoRowsOverlay","EmptyTableRowOverlay","LoadingOverlay","ServicePlanAdd","ServiceplanDetail","Page","PageHeader","elevation","ServicePlansPage"],"sourceRoot":""}