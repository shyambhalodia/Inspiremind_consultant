{"version":3,"file":"static/js/831.ee6b09c0.chunk.js","mappings":"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","sources":["components/auth/signup/RegisterForm.jsx","pages/auth/signup/SignUp.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useGoogleReCaptcha } from \"react-google-recaptcha-v3\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport Visibility from \"@mui/icons-material/Visibility\";\r\nimport VisibilityOff from \"@mui/icons-material/VisibilityOff\";\r\nimport Box from \"@mui/material/Box\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormHelperText from \"@mui/material/FormHelperText\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\nimport { Formik } from \"formik\";\r\n\r\nimport {\r\n  postSignup,\r\n  postUserExist,\r\n} from \"../../../store/slice/auth/signup/signupSlice\";\r\nimport translate from \"../../hooks/translate\";\r\nimport CMLoadingButton from \"../../ui-components/buttons/CMLoadingButton\";\r\nimport GoogleSignup from \"../../../pages/auth/signin/GoogleSignup\";\r\nimport FacebookSignup from \"../../../pages/auth/signin/FacebookSignup\";\r\nimport Stack from \"@mui/material/Stack\";\r\n\r\nconst RegisterForm = () => {\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const loading = useSelector((state) => state.signup.loading);\r\n  const { executeRecaptcha } = useGoogleReCaptcha();\r\n\r\n  const theme = useTheme();\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const specialCharacter = /^[aA-zZ\\s]+$/;\r\n  const schemaObj = Yup.object().shape({\r\n    firstName: Yup.string()\r\n      .min(3, translate(\"common_error_too_short_min_3_character_required\"))\r\n      .max(18, translate(\"common_error_too_long_max_18_character_required\"))\r\n      .matches(\r\n        specialCharacter,\r\n        translate(\"common_error_special_characters_is_not_allowed\")\r\n      )\r\n      .required(translate(\"consultant_first_name_required\")),\r\n    lastName: Yup.string()\r\n      .min(3, translate(\"common_error_too_short_min_3_character_required\"))\r\n      .max(18, translate(\"common_error_too_long_max_18_character_required\"))\r\n      .matches(\r\n        specialCharacter,\r\n        translate(\"common_error_special_characters_is_not_allowed\")\r\n      )\r\n      .required(translate(\"consultant_last_name_required\")),\r\n    email: Yup.string()\r\n      .email(translate(\"common_error_email_valid_email\"))\r\n      .required(translate(\"common_error_email_required\")),\r\n    password: Yup.string()\r\n      .min(6, \"Must Contain 6 Characters\")\r\n      .required(translate(\"common_error_email_required\"))\r\n      .max(18, translate(\"common_error_too_long_max_18_character_required\"))\r\n      .matches(/^(?=.*[a-z])/, \" Must Contain One Lowercase Character\")\r\n      .matches(/^(?=.*[A-Z])/, \"  Must Contain One Uppercase Character\")\r\n      .matches(/^(?=.*[0-9])/, \"  Must Contain One Number Character\")\r\n      .matches(\r\n        /^(?=.*[!@#\\$%\\^&\\*])/,\r\n        \"  Must Contain  One Special Case Character\"\r\n      ),\r\n    // .required(translate(\"common_error_password_required\")),\r\n  });\r\n\r\n  const handleClickShowPassword = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const handelSignup = async (data) => {\r\n    if (!executeRecaptcha) {\r\n      toast.error(\"You are not Authorized\");\r\n      return;\r\n    }\r\n    const token = await executeRecaptcha(\"yourAction\");\r\n    const signupPayload = {\r\n      firstName: data.firstName,\r\n      lastName: data.lastName,\r\n      email: data.email,\r\n      password: data.password,\r\n      googleRecaptchaToken: token,\r\n    };\r\n\r\n    const res = await dispatch(postSignup(signupPayload))\r\n      .unwrap()\r\n      .then((result) => {\r\n        if (result.status) {\r\n          toast.success(result.message);\r\n          navigate(\"/otp-verify\", { state: { isOtpVerified: true } });\r\n        } else {\r\n          toast.error(result.message);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"signup error========>\", error);\r\n      });\r\n    return res;\r\n  };\r\n\r\n  const handleUserExist = async (value, setFieldError) => {\r\n    if (value) {\r\n      const payload = {\r\n        email: value,\r\n      };\r\n      const res = await dispatch(postUserExist(payload))\r\n        .unwrap()\r\n        .then((result) => {\r\n          if (result.status === false) {\r\n            const error = \"email is already register !\";\r\n            setFieldError(\"email\", error);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"user verify error========>\", error);\r\n        });\r\n      return res;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box component=\"div\" className=\"h-100\">\r\n        <Formik\r\n          initialValues={{\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            email: \"\",\r\n            password: \"\",\r\n          }}\r\n          validationSchema={schemaObj}\r\n          onSubmit={(values) => {\r\n            handelSignup(values);\r\n          }}\r\n        >\r\n          {(props) => (\r\n            <form onSubmit={props.handleSubmit}>\r\n              <>\r\n                <Grid container>\r\n                  <Grid\r\n                    item\r\n                    sm={9}\r\n                    md={10}\r\n                    lg={8}\r\n                    sx={{ mx: { md: \"0\", xs: \"auto\" } }}\r\n                  >\r\n                    <Typography variant=\"h4\" align=\"center\" mb={2}>\r\n                      {translate(\"common_register_now\")}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"body1\"\r\n                      color=\"text.secondary\"\r\n                      align=\"center\"\r\n                      my={2}\r\n                    >\r\n                      {translate(\"consultant_sign_up_with_email_address\")}\r\n                    </Typography>\r\n                    <Grid container spacing={2} justifyContent=\"center\">\r\n                      <Grid item xs={6}>\r\n                        <TextField\r\n                          label={translate(\"common_first_name\")}\r\n                          name=\"firstName\"\r\n                          value={props.values.firstName}\r\n                          onChange={props.handleChange}\r\n                          onBlur={props.handleBlur}\r\n                          error={\r\n                            props.errors.firstName && props.touched.firstName\r\n                              ? true\r\n                              : false\r\n                          }\r\n                          helperText={\r\n                            props.errors.firstName && props.touched.firstName\r\n                              ? props.errors.firstName\r\n                              : null\r\n                          }\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <TextField\r\n                          label={translate(\"common_last_name\")}\r\n                          name=\"lastName\"\r\n                          value={props.values.lastName}\r\n                          onChange={props.handleChange}\r\n                          onBlur={props.handleBlur}\r\n                          error={\r\n                            props.errors.lastName && props.touched.lastName\r\n                              ? true\r\n                              : false\r\n                          }\r\n                          helperText={\r\n                            props.errors.lastName && props.touched.lastName\r\n                              ? props.errors.lastName\r\n                              : null\r\n                          }\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={12}>\r\n                        <TextField\r\n                          label={translate(\"common_email\")}\r\n                          name=\"email\"\r\n                          value={props.values.email}\r\n                          onChange={props.handleChange}\r\n                          onBlur={(e) => {\r\n                            handleUserExist(\r\n                              props.values.email,\r\n                              props.setFieldError,\r\n                              props.errors\r\n                            );\r\n                            props.handleBlur(e);\r\n                          }}\r\n                          error={\r\n                            props.errors.email && props.touched.email\r\n                              ? true\r\n                              : false\r\n                          }\r\n                          helperText={\r\n                            props.errors.email && props.touched.email\r\n                              ? props.errors.email\r\n                              : null\r\n                          }\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={12}>\r\n                        <FormControl\r\n                          fullWidth\r\n                          sx={{ ...theme.typography.customInput }}\r\n                        >\r\n                          <InputLabel\r\n                            error={\r\n                              props.errors.password && props.touched.password\r\n                            }\r\n                            htmlFor=\"outlined-adornment-password\"\r\n                          >\r\n                            {translate(\"common_password\")}\r\n                          </InputLabel>\r\n                          <OutlinedInput\r\n                            label={translate(\"common_password\")}\r\n                            type={showPassword ? \"text\" : \"password\"}\r\n                            name=\"password\"\r\n                            value={props.values.password}\r\n                            onChange={props.handleChange}\r\n                            onBlur={props.handleBlur}\r\n                            error={\r\n                              props.errors.password && props.touched.password\r\n                                ? true\r\n                                : false\r\n                            }\r\n                            endAdornment={\r\n                              <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                  onClick={handleClickShowPassword}\r\n                                  onMouseDown={handleMouseDownPassword}\r\n                                  edge=\"end\"\r\n                                >\r\n                                  {showPassword ? (\r\n                                    <VisibilityOff />\r\n                                  ) : (\r\n                                    <Visibility />\r\n                                  )}\r\n                                </IconButton>\r\n                              </InputAdornment>\r\n                            }\r\n                          />\r\n                          {props.errors.password && props.touched.password && (\r\n                            <FormHelperText error>\r\n                              {props.errors.password}\r\n                            </FormHelperText>\r\n                          )}\r\n                        </FormControl>\r\n                      </Grid>\r\n                      <Grid item xs={12}>\r\n                        <CMLoadingButton\r\n                          variant=\"contained\"\r\n                          fullWidth\r\n                          type=\"submit\"\r\n                          loading={props.isSubmitting && loading}\r\n                          disabled={props.isSubmitting && loading}\r\n                        >\r\n                          {translate(\"common_sign_up\")}\r\n                        </CMLoadingButton>\r\n                      </Grid>\r\n                      <Typography variant=\"body1\" my={2}>\r\n                        {translate(\"common_already_have_an_account\")} ?{\" \"}\r\n                        <Link to=\"/login\">{translate(\"common_login\")}</Link>\r\n                      </Typography>\r\n\r\n                      <Grid item xs={12}>\r\n                        <Stack\r\n                          direction=\"row\"\r\n                          spacing={3}\r\n                          justifyContent=\"center\"\r\n                          mb={3}\r\n                        >\r\n                          <GoogleSignup />\r\n                          <FacebookSignup />\r\n                        </Stack>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </>\r\n            </form>\r\n          )}\r\n        </Formik>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RegisterForm;\r\n","import Box from \"@mui/material/Box\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport { GoogleReCaptchaProvider } from \"react-google-recaptcha-v3\";\r\nimport ImageComponent from \"../../../components/auth/signup/ImageComponent\";\r\nimport RegisterForm from \"../../../components/auth/signup/RegisterForm\";\r\n\r\nconst SignUp = () => {\r\n  const GOOGLE_RECAPTCHA_KEY = process.env.REACT_APP_GOOGLE_RECAPTCHA_KEY;\r\n  return (\r\n    <Box\r\n      component=\"section\"\r\n      sx={{ py: { sm: 6.4, xs: 4 } }}\r\n      className=\"d-flex align-items-center justify-content-center w-100\"\r\n    >\r\n      <Container maxWidth=\"xl\">\r\n        <Grid\r\n          container\r\n          spacing={2}\r\n          sx={{ justifyContent: { md: \"space-between\", xs: \"center\" } }}\r\n          column={12}\r\n        >\r\n          <Grid item lg={6} md={6}>\r\n            <GoogleReCaptchaProvider reCaptchaKey={GOOGLE_RECAPTCHA_KEY}>\r\n              <RegisterForm />\r\n            </GoogleReCaptchaProvider>\r\n          </Grid>\r\n          <Grid item lg={5} md={6}>\r\n            <ImageComponent />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n"],"names":["_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","loading","useSelector","state","signup","executeRecaptcha","useGoogleReCaptcha","theme","useTheme","dispatch","useDispatch","navigate","useNavigate","specialCharacter","schemaObj","Yup","shape","firstName","min","translate","max","matches","required","lastName","email","password","handleClickShowPassword","handleMouseDownPassword","event","preventDefault","handelSignup","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","token","signupPayload","res","wrap","_context","prev","next","toast","error","abrupt","sent","googleRecaptchaToken","postSignup","unwrap","then","result","status","success","message","isOtpVerified","catch","console","log","stop","_x","apply","arguments","handleUserExist","_ref2","_callee2","value","setFieldError","payload","_context2","postUserExist","_x2","_x3","_jsx","_Fragment","children","Box","component","className","Formik","initialValues","validationSchema","onSubmit","values","props","handleSubmit","Grid","container","_jsxs","item","sm","md","lg","sx","mx","xs","Typography","variant","align","mb","color","my","spacing","justifyContent","TextField","label","name","onChange","handleChange","onBlur","handleBlur","errors","touched","helperText","e","FormControl","fullWidth","_objectSpread","typography","customInput","InputLabel","htmlFor","OutlinedInput","type","endAdornment","InputAdornment","position","IconButton","onClick","onMouseDown","edge","VisibilityOff","Visibility","FormHelperText","CMLoadingButton","isSubmitting","disabled","Link","to","Stack","direction","GoogleSignup","FacebookSignup","py","Container","maxWidth","column","GoogleReCaptchaProvider","reCaptchaKey","process","RegisterForm","ImageComponent"],"sourceRoot":""}