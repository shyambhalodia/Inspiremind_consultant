{"version":3,"file":"static/js/821.8073c53a.chunk.js","mappings":"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","sources":["components/auth/signin/LoginForm.jsx","pages/auth/signin/SignIn.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport Visibility from \"@mui/icons-material/Visibility\";\r\nimport VisibilityOff from \"@mui/icons-material/VisibilityOff\";\r\nimport Box from \"@mui/material/Box\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormHelperText from \"@mui/material/FormHelperText\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nimport { Formik } from \"formik\";\r\nimport { get } from \"lodash\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport { useGoogleReCaptcha } from \"react-google-recaptcha-v3\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport * as Yup from \"yup\";\r\n\r\n\r\nimport {\r\n  getMeInfo,\r\n  setAuthToken,\r\n  setIsLoggedIn\r\n} from \"../../../store/slice/auth/authentication/authSlice\";\r\nimport { postSignin } from \"../../../store/slice/auth/signin/signinSlice\";\r\nimport {\r\n  expireTime,\r\n  getCustomCookie,\r\n  setCustomCookie\r\n} from \"../../hooks/cookie\";\r\nimport translate from \"../../hooks/translate\";\r\nimport CMLoadingButton from \"../../ui-components/buttons/CMLoadingButton\";\r\nimport GoogleSignup from \"../../../pages/auth/signin/GoogleSignup\";\r\nimport FacebookSignup from \"../../../pages/auth/signin/FacebookSignup\";\r\nimport { GoogleReCaptchaProvider } from \"react-google-recaptcha-v3\";\r\n\r\n\r\nconst LoginForm = () => {\r\n\r\n  const GOOGLE_RECAPTCHA_KEY = process.env.REACT_APP_GOOGLE_RECAPTCHA_KEY;\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const loading = useSelector((state) => state.signin.loading);\r\n\r\n  const [, setCookie] = useCookies();\r\n  const { executeRecaptcha } = useGoogleReCaptcha();\r\n\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const theme = useTheme();\r\n\r\n  const schemaObj = Yup.object().shape({\r\n    email: Yup.string()\r\n      .email(translate(\"common_error_email_valid_email\"))\r\n      .required(translate(\"common_error_email_required\")),\r\n    // password: Yup.string()\r\n    //   .min(6, translate(\"common_error_password_too_short_min_6_length\"))\r\n    //   .max(18, translate(\"common_error_password_too_long_max_18_length\"))\r\n    //   .required(translate(\"common_error_password_required\")),\r\n  });\r\n\r\n  const cookieData = getCustomCookie(\"remember_me\");\r\n\r\n  const handleClickShowPassword = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const handleSignin = async (data) => {\r\n    if (!executeRecaptcha) {\r\n      toast.error(\"You are not authorized\");\r\n      return;\r\n    }\r\n    const token = await executeRecaptcha(\"yourAction\");\r\n\r\n    const payload = {\r\n      email: data.email,\r\n      password: data.password,\r\n      googleRecaptchaToken: token,\r\n    };\r\n    const res = await dispatch(postSignin(payload))\r\n      .unwrap()\r\n      .then(async (result) => {\r\n        if (result.status && get(result, \"data.token\", \"\") !== \"\") {\r\n          const userData = {\r\n            token: result.data.token,\r\n          };\r\n          setCookie(\"consultant_data\", userData, {\r\n            path: \"/\",\r\n            expires: expireTime,\r\n          });\r\n\r\n          await dispatch(getMeInfo())\r\n            .unwrap()\r\n            .then((result) => {\r\n              if (result.status) {\r\n                setCookie(\r\n                  \"isSignupCompleted\",\r\n                  get(result, \"data.termsAndCondition\", false),\r\n                  { path: \"/\", expires: expireTime }\r\n                );\r\n              }\r\n            })\r\n            .catch((error) => {\r\n              console.log(\"me error=======>\", error);\r\n            });\r\n\r\n          dispatch(setAuthToken(result.data.token));\r\n          dispatch(setIsLoggedIn(true));\r\n          toast.success(result.message);\r\n          navigate(\"/dashboard\");\r\n        } else {\r\n          toast.error(result.message);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"signin error========>\", error);\r\n      });\r\n    return res;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Paper variant=\"outlined\">\r\n        <CardContent>\r\n          <Formik\r\n            initialValues={{\r\n              email: get(cookieData, \"email\", \"\"),\r\n              password: \"\",\r\n              rememberMe: false,\r\n            }}\r\n            validationSchema={schemaObj}\r\n            onSubmit={(values) => {\r\n              handleSignin(values);\r\n              if (values.rememberMe) {\r\n                const rememberMeData = {\r\n                  email: values.email,\r\n                };\r\n                setCustomCookie(\"remember_me\", rememberMeData);\r\n              }\r\n            }}\r\n          >\r\n            {(props) => (\r\n              <form onSubmit={props.handleSubmit}>\r\n                <Typography variant=\"h4\" align=\"center\" mb={3}>\r\n                  {translate(\"consultant_get_ready_to_login\")}\r\n                </Typography>\r\n                <Stack\r\n                    direction=\"row\"\r\n                    spacing={3}\r\n                    justifyContent=\"center\"\r\n                    mb={3}\r\n                  >\r\n                    \r\n                    <GoogleSignup />\r\n                    <FacebookSignup />\r\n                  </Stack>\r\n                <Grid container spacing={2} justifyContent=\"center\">\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      label={translate(\"common_email\")}\r\n                      name=\"email\"\r\n                      value={props.values.email}\r\n                      onChange={props.handleChange}\r\n                      onBlur={props.handleBlur}\r\n                      // fullWidth\r\n                      error={\r\n                        props.errors.email && props.touched.email ? true : false\r\n                      }\r\n                      helperText={\r\n                        props.errors.email && props.touched.email\r\n                          ? props.errors.email\r\n                          : null\r\n                      }\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <FormControl\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                      sx={{ ...theme.typography.customInput }}\r\n                    >\r\n                      <InputLabel\r\n                        error={props.errors.password && props.touched.password}\r\n                        htmlFor=\"outlined-adornment-password\"\r\n                      >\r\n                        {translate(\"common_password\")}\r\n                      </InputLabel>\r\n                      <OutlinedInput\r\n                        id=\"outlined-adornment-password\"\r\n                        label={translate(\"common_password\")}\r\n                        type={showPassword ? \"text\" : \"password\"}\r\n                        name=\"password\"\r\n                        value={props.values.password}\r\n                        onChange={props.handleChange}\r\n                        onBlur={props.handleBlur}\r\n                        endAdornment={\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                              aria-label=\"toggle password visibility\"\r\n                              onClick={handleClickShowPassword}\r\n                              onMouseDown={handleMouseDownPassword}\r\n                              edge=\"end\"\r\n                            >\r\n                              {showPassword ? (\r\n                                <VisibilityOff />\r\n                              ) : (\r\n                                <Visibility />\r\n                              )}\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        }\r\n                        error={\r\n                          props.errors.password && props.touched.password\r\n                            ? true\r\n                            : false\r\n                        }\r\n                      />\r\n                      {props.errors.password && props.touched.password && (\r\n                        <FormHelperText error id=\"outlined-adornment-password\">\r\n                          {props.errors.password}\r\n                        </FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                    <Stack\r\n                      direction={{ xs: \"column\", sm: \"row\" }}\r\n                      alignItems={{ xs: \"start\", sm: \"center\" }}\r\n                      justifyContent={{ xs: \"center\", sm: \"space-between\" }}\r\n                      sx={{ width: \"100%\" }}\r\n                    >\r\n                      <Box component=\"div\">\r\n                        <FormGroup>\r\n                          <FormControlLabel\r\n                            control={\r\n                              <Checkbox\r\n                                name=\"rememberMe\"\r\n                                value={props.values.rememberMe}\r\n                                onChange={props.handleChange}\r\n                              />\r\n                            }\r\n                            label={translate(\"common_remember_me\") + \" ?\"}\r\n                          />\r\n                        </FormGroup>\r\n                      </Box>\r\n                      <Box component=\"div\">\r\n                        <Link to=\"/recover/account\">\r\n                          {translate(\"common_forgot_password\")} ?\r\n                        </Link>\r\n                      </Box>\r\n                    </Stack>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <CMLoadingButton\r\n                      variant=\"contained\"\r\n                      fullWidth\r\n                      type=\"submit\"\r\n                      loading={props.isSubmitting && loading}\r\n                      disabled={props.isSubmitting && loading}\r\n                    >\r\n                      {translate(\"common_sign_in\")}\r\n                    </CMLoadingButton>\r\n                  </Grid>\r\n                  <Typography variant=\"body1\" mt={2}>\r\n                    {translate(\"common_dont_have_an_account\")} ?{\" \"}\r\n                    <Link to=\"/signup\">{translate(\"common_sign_up\")}</Link>\r\n                  </Typography>\r\n                </Grid>\r\n              </form>\r\n            )}\r\n          </Formik>\r\n        </CardContent>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import Box from \"@mui/material/Box\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport React from \"react\";\r\nimport { GoogleReCaptchaProvider } from \"react-google-recaptcha-v3\";\r\nimport LoginForm from \"../../../components/auth/signin/LoginForm\";\r\n\r\nconst SignIn = () => {\r\n  const GOOGLE_RECAPTCHA_KEY = process.env.REACT_APP_GOOGLE_RECAPTCHA_KEY;\r\n  return (\r\n    <>\r\n      <Box component=\"section\" sx={{ py: { sm: 6.4, xs: 4 } }} className=\"d-flex align-items-center justify-content-center w-100\">\r\n        <Container maxWidth=\"xl\">\r\n          <Grid container spacing={2} justifyContent=\"center\">\r\n            <Grid item xs={12} sm={8} md={6} lg={5} xl={4}>\r\n              <GoogleReCaptchaProvider reCaptchaKey={GOOGLE_RECAPTCHA_KEY}>\r\n                <LoginForm />\r\n              </GoogleReCaptchaProvider>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n"],"names":["_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","loading","useSelector","state","signin","_useCookies","useCookies","setCookie","executeRecaptcha","useGoogleReCaptcha","navigate","useNavigate","dispatch","useDispatch","theme","useTheme","schemaObj","Yup","shape","email","translate","required","cookieData","getCustomCookie","handleClickShowPassword","handleMouseDownPassword","event","preventDefault","handleSignin","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","data","token","payload","res","wrap","_context2","prev","next","toast","error","abrupt","sent","password","googleRecaptchaToken","postSignin","unwrap","then","_ref2","_callee","result","userData","_context","status","get","path","expires","expireTime","getMeInfo","catch","console","log","setAuthToken","setIsLoggedIn","success","message","stop","_x2","apply","arguments","_x","_jsx","_Fragment","children","Paper","variant","CardContent","Formik","initialValues","rememberMe","validationSchema","onSubmit","values","rememberMeData","setCustomCookie","props","_jsxs","handleSubmit","Typography","align","mb","Stack","direction","spacing","justifyContent","GoogleSignup","FacebookSignup","Grid","container","item","xs","TextField","label","name","value","onChange","handleChange","onBlur","handleBlur","errors","touched","helperText","FormControl","fullWidth","sx","_objectSpread","typography","customInput","InputLabel","htmlFor","OutlinedInput","id","type","endAdornment","InputAdornment","position","IconButton","onClick","onMouseDown","edge","VisibilityOff","Visibility","FormHelperText","sm","alignItems","width","Box","component","FormGroup","FormControlLabel","control","Checkbox","Link","to","CMLoadingButton","isSubmitting","disabled","mt","py","className","Container","maxWidth","md","lg","xl","GoogleReCaptchaProvider","reCaptchaKey","process","LoginForm"],"sourceRoot":""}